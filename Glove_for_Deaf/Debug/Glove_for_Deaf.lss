
Glove_for_Deaf.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  000006b4  00000728  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000079c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001978  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009bd  00000000  00000000  00002278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c0e  00000000  00000000  00002c35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000028c  00000000  00000000  00003844  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005af  00000000  00000000  00003ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cb2  00000000  00000000  0000407f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00004d31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__ctors_end>
   4:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   8:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  10:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  14:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  18:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  1c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  20:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  24:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  28:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  2c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  30:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  34:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  3c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  40:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  44:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  48:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  4c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  50:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  54:	78 00       	.word	0x0078	; ????
  56:	7e 00       	.word	0x007e	; ????
  58:	84 00       	.word	0x0084	; ????
  5a:	8a 00       	.word	0x008a	; ????
  5c:	90 00       	.word	0x0090	; ????
  5e:	a1 00       	.word	0x00a1	; ????
  60:	a1 00       	.word	0x00a1	; ????
  62:	a1 00       	.word	0x00a1	; ????
  64:	a1 00       	.word	0x00a1	; ????
  66:	a1 00       	.word	0x00a1	; ????
  68:	a1 00       	.word	0x00a1	; ????
  6a:	a1 00       	.word	0x00a1	; ????
  6c:	96 00       	.word	0x0096	; ????
  6e:	a1 00       	.word	0x00a1	; ????
  70:	a1 00       	.word	0x00a1	; ????
  72:	a1 00       	.word	0x00a1	; ????
  74:	a1 00       	.word	0x00a1	; ????
  76:	a1 00       	.word	0x00a1	; ????
  78:	a1 00       	.word	0x00a1	; ????
  7a:	a1 00       	.word	0x00a1	; ????
  7c:	a1 00       	.word	0x00a1	; ????
  7e:	a1 00       	.word	0x00a1	; ????
  80:	a1 00       	.word	0x00a1	; ????
  82:	a1 00       	.word	0x00a1	; ????
  84:	a1 00       	.word	0x00a1	; ????
  86:	a1 00       	.word	0x00a1	; ????
  88:	a1 00       	.word	0x00a1	; ????
  8a:	a1 00       	.word	0x00a1	; ????
  8c:	a1 00       	.word	0x00a1	; ????
  8e:	a1 00       	.word	0x00a1	; ????
  90:	a1 00       	.word	0x00a1	; ????
  92:	a1 00       	.word	0x00a1	; ????
  94:	a1 00       	.word	0x00a1	; ????
  96:	a1 00       	.word	0x00a1	; ????
  98:	9c 00       	.word	0x009c	; ????

0000009a <__ctors_end>:
  9a:	11 24       	eor	r1, r1
  9c:	1f be       	out	0x3f, r1	; 63
  9e:	cf e5       	ldi	r28, 0x5F	; 95
  a0:	d8 e0       	ldi	r29, 0x08	; 8
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
  a6:	10 e0       	ldi	r17, 0x00	; 0
  a8:	a0 e6       	ldi	r26, 0x60	; 96
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	e4 eb       	ldi	r30, 0xB4	; 180
  ae:	f6 e0       	ldi	r31, 0x06	; 6
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <__do_copy_data+0x10>
  b2:	05 90       	lpm	r0, Z+
  b4:	0d 92       	st	X+, r0
  b6:	a4 3a       	cpi	r26, 0xA4	; 164
  b8:	b1 07       	cpc	r27, r17
  ba:	d9 f7       	brne	.-10     	; 0xb2 <__do_copy_data+0xc>
  bc:	0e 94 19 03 	call	0x632	; 0x632 <main>
  c0:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <_exit>

000000c4 <__bad_interrupt>:
  c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c8 <ADC_Init>:


void ADC_Init(void)
{
	#if ADC_VOLTAGE_REFRENCE == ADC_VREF_VCC
        SET_BIT(ADMUX , 6);
  c8:	3e 9a       	sbi	0x07, 6	; 7
        CLR_BIT(ADMUX , 7);
  ca:	3f 98       	cbi	0x07, 7	; 7
		
    #endif
	
   #if ADC_CHANNEL == ADC_CHANNEL_1
	 SET_BIT(ADMUX , 0);
  cc:	38 9a       	sbi	0x07, 0	; 7
	
   #endif
	
   #if ADC_CONVERSION_TRIGGER ==  ADC_CONVERSION_AUTO_TRIGGER
     SET_BIT(ADCSRA , 5);
  ce:	35 9a       	sbi	0x06, 5	; 6
   #endif
   
   #if ADC_PRESCALER      ==     ADC_PRESCALER_128
SET_BIT(ADCSRA , 0);
  d0:	30 9a       	sbi	0x06, 0	; 6
SET_BIT(ADCSRA , 1);
  d2:	31 9a       	sbi	0x06, 1	; 6
SET_BIT(ADCSRA , 2);
  d4:	32 9a       	sbi	0x06, 2	; 6
  #endif
  
  #if ADC_INTERRUPT_STATUS  ==  ADC_INTERRUPT_DISABLED
     CLR_BIT(ADCSRA , 3);
  d6:	33 98       	cbi	0x06, 3	; 6
    
  #endif
	 
  #if ADC_ADJUST        ==      ADC_RIGHT_ADJUCT
	   CLR_BIT(ADMUX , 5);
  d8:	3d 98       	cbi	0x07, 5	; 7
  #endif
	
	SET_BIT(ADCSRA , 7); //Enable ADC
  da:	37 9a       	sbi	0x06, 7	; 6
  dc:	08 95       	ret

000000de <ADC_Select_Channel>:
}

void ADC_Select_Channel(uint8 channel)
{
	switch(channel)
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	83 32       	cpi	r24, 0x23	; 35
  e2:	91 05       	cpc	r25, r1
  e4:	70 f5       	brcc	.+92     	; 0x142 <ADC_Select_Channel+0x64>
  e6:	fc 01       	movw	r30, r24
  e8:	e6 5d       	subi	r30, 0xD6	; 214
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	0c 94 43 03 	jmp	0x686	; 0x686 <__tablejump2__>
	{
		case 0:
		CLR_BIT(ADMUX, 0);
  f0:	38 98       	cbi	0x07, 0	; 7
		CLR_BIT(ADMUX, 1);
  f2:	39 98       	cbi	0x07, 1	; 7
		CLR_BIT(ADMUX, 2);
  f4:	3a 98       	cbi	0x07, 2	; 7
		CLR_BIT(ADMUX, 3);
  f6:	3b 98       	cbi	0x07, 3	; 7
		CLR_BIT(ADMUX, 4);
  f8:	3c 98       	cbi	0x07, 4	; 7
		break;
  fa:	08 95       	ret
		
		case 1:
		SET_BIT(ADMUX, 0);
  fc:	38 9a       	sbi	0x07, 0	; 7
		CLR_BIT(ADMUX, 1);
  fe:	39 98       	cbi	0x07, 1	; 7
		CLR_BIT(ADMUX, 2);
 100:	3a 98       	cbi	0x07, 2	; 7
		CLR_BIT(ADMUX, 3);
 102:	3b 98       	cbi	0x07, 3	; 7
		CLR_BIT(ADMUX, 4);
 104:	3c 98       	cbi	0x07, 4	; 7
		break;
 106:	08 95       	ret
		
		case 2:
		CLR_BIT(ADMUX, 0);
 108:	38 98       	cbi	0x07, 0	; 7
		SET_BIT(ADMUX, 1);
 10a:	39 9a       	sbi	0x07, 1	; 7
		CLR_BIT(ADMUX, 2);
 10c:	3a 98       	cbi	0x07, 2	; 7
		CLR_BIT(ADMUX, 3);
 10e:	3b 98       	cbi	0x07, 3	; 7
		CLR_BIT(ADMUX, 4);
 110:	3c 98       	cbi	0x07, 4	; 7
		break;
 112:	08 95       	ret
		
		case 3:
		SET_BIT(ADMUX, 0);
 114:	38 9a       	sbi	0x07, 0	; 7
		SET_BIT(ADMUX, 1);
 116:	39 9a       	sbi	0x07, 1	; 7
		CLR_BIT(ADMUX, 2);
 118:	3a 98       	cbi	0x07, 2	; 7
		CLR_BIT(ADMUX, 3);
 11a:	3b 98       	cbi	0x07, 3	; 7
		CLR_BIT(ADMUX, 4);
 11c:	3c 98       	cbi	0x07, 4	; 7
		break;
 11e:	08 95       	ret
		
		case 4:
		CLR_BIT(ADMUX, 0);
 120:	38 98       	cbi	0x07, 0	; 7
		CLR_BIT(ADMUX, 1);
 122:	39 98       	cbi	0x07, 1	; 7
		SET_BIT(ADMUX, 2);
 124:	3a 9a       	sbi	0x07, 2	; 7
		CLR_BIT(ADMUX, 3);
 126:	3b 98       	cbi	0x07, 3	; 7
		CLR_BIT(ADMUX, 4);
 128:	3c 98       	cbi	0x07, 4	; 7
		break;
 12a:	08 95       	ret
		
		case 12:
		CLR_BIT(ADMUX, 0);
 12c:	38 98       	cbi	0x07, 0	; 7
		CLR_BIT(ADMUX, 1);
 12e:	39 98       	cbi	0x07, 1	; 7
		CLR_BIT(ADMUX, 2);
 130:	3a 98       	cbi	0x07, 2	; 7
		CLR_BIT(ADMUX, 3);
 132:	3b 98       	cbi	0x07, 3	; 7
		SET_BIT(ADMUX, 4);
 134:	3c 9a       	sbi	0x07, 4	; 7
		break;
 136:	08 95       	ret
		
		case 34:
		SET_BIT(ADMUX, 0);
 138:	38 9a       	sbi	0x07, 0	; 7
		SET_BIT(ADMUX, 1);
 13a:	39 9a       	sbi	0x07, 1	; 7
		CLR_BIT(ADMUX, 2);
 13c:	3a 98       	cbi	0x07, 2	; 7
		SET_BIT(ADMUX, 3);
 13e:	3b 9a       	sbi	0x07, 3	; 7
		SET_BIT(ADMUX, 4);
 140:	3c 9a       	sbi	0x07, 4	; 7
 142:	08 95       	ret

00000144 <ADC_ReadAnalogValue>:
uint16  ADC_ReadAnalogValue(void)
{
	uint16  Digital_Value = 0;
	uint16  V_Input = 0;
	
	SET_BIT(ADCSRA , 6);   // Start Conversion
 144:	36 9a       	sbi	0x06, 6	; 6
	
	while(! (GET_BIT(ADCSRA , 4))); //wait till end of conversion
 146:	34 9b       	sbis	0x06, 4	; 6
 148:	fe cf       	rjmp	.-4      	; 0x146 <ADC_ReadAnalogValue+0x2>
	
	Digital_Value = ADC_Adjust;
 14a:	24 b1       	in	r18, 0x04	; 4
 14c:	35 b1       	in	r19, 0x05	; 5
	
	V_Input = (Digital_Value * 50) / 1024 ;
	
	return V_Input;
 14e:	42 e3       	ldi	r20, 0x32	; 50
 150:	42 9f       	mul	r20, r18
 152:	c0 01       	movw	r24, r0
 154:	43 9f       	mul	r20, r19
 156:	90 0d       	add	r25, r0
 158:	11 24       	eor	r1, r1
	
 15a:	89 2f       	mov	r24, r25
 15c:	86 95       	lsr	r24
 15e:	86 95       	lsr	r24
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	08 95       	ret

00000164 <DIO_SetPinDir>:

		break;

	case DIO_PORTD :

		PORTD = Val;
 164:	44 23       	and	r20, r20
 166:	b9 f1       	breq	.+110    	; 0x1d6 <DIO_SetPinDir+0x72>
 168:	41 30       	cpi	r20, 0x01	; 1
 16a:	09 f0       	breq	.+2      	; 0x16e <DIO_SetPinDir+0xa>
 16c:	6b c0       	rjmp	.+214    	; 0x244 <DIO_SetPinDir+0xe0>
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	89 f0       	breq	.+34     	; 0x194 <DIO_SetPinDir+0x30>
 172:	28 f0       	brcs	.+10     	; 0x17e <DIO_SetPinDir+0x1a>
 174:	82 30       	cpi	r24, 0x02	; 2
 176:	c9 f0       	breq	.+50     	; 0x1aa <DIO_SetPinDir+0x46>
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	11 f1       	breq	.+68     	; 0x1c0 <DIO_SetPinDir+0x5c>
 17c:	08 95       	ret
 17e:	2a b3       	in	r18, 0x1a	; 26
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_SetPinDir+0x26>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_SetPinDir+0x22>
 18e:	82 2b       	or	r24, r18
 190:	8a bb       	out	0x1a, r24	; 26
 192:	08 95       	ret
 194:	27 b3       	in	r18, 0x17	; 23
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_SetPinDir+0x3c>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_SetPinDir+0x38>
 1a4:	82 2b       	or	r24, r18
 1a6:	87 bb       	out	0x17, r24	; 23
 1a8:	08 95       	ret
 1aa:	24 b3       	in	r18, 0x14	; 20
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_SetPinDir+0x52>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_SetPinDir+0x4e>
 1ba:	82 2b       	or	r24, r18
 1bc:	84 bb       	out	0x14, r24	; 20
 1be:	08 95       	ret
 1c0:	21 b3       	in	r18, 0x11	; 17
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_SetPinDir+0x68>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_SetPinDir+0x64>
 1d0:	82 2b       	or	r24, r18
 1d2:	81 bb       	out	0x11, r24	; 17
 1d4:	08 95       	ret
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	91 f0       	breq	.+36     	; 0x1fe <DIO_SetPinDir+0x9a>
 1da:	28 f0       	brcs	.+10     	; 0x1e6 <DIO_SetPinDir+0x82>
 1dc:	82 30       	cpi	r24, 0x02	; 2
 1de:	d9 f0       	breq	.+54     	; 0x216 <DIO_SetPinDir+0xb2>
 1e0:	83 30       	cpi	r24, 0x03	; 3
 1e2:	29 f1       	breq	.+74     	; 0x22e <DIO_SetPinDir+0xca>
 1e4:	08 95       	ret
 1e6:	2a b3       	in	r18, 0x1a	; 26
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_SetPinDir+0x8e>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_SetPinDir+0x8a>
 1f6:	80 95       	com	r24
 1f8:	82 23       	and	r24, r18
 1fa:	8a bb       	out	0x1a, r24	; 26
 1fc:	08 95       	ret
 1fe:	27 b3       	in	r18, 0x17	; 23
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_SetPinDir+0xa6>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_SetPinDir+0xa2>
 20e:	80 95       	com	r24
 210:	82 23       	and	r24, r18
 212:	87 bb       	out	0x17, r24	; 23
 214:	08 95       	ret
 216:	24 b3       	in	r18, 0x14	; 20
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_SetPinDir+0xbe>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_SetPinDir+0xba>
 226:	80 95       	com	r24
 228:	82 23       	and	r24, r18
 22a:	84 bb       	out	0x14, r24	; 20
 22c:	08 95       	ret
 22e:	21 b3       	in	r18, 0x11	; 17
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_SetPinDir+0xd6>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_SetPinDir+0xd2>
 23e:	80 95       	com	r24
 240:	82 23       	and	r24, r18
 242:	81 bb       	out	0x11, r24	; 17
 244:	08 95       	ret

00000246 <DIO_WritePin>:



void DIO_WritePin(uint8 Port ,uint8 Pin, uint8 Val)
{
	switch (Val)
 246:	44 23       	and	r20, r20
 248:	b9 f1       	breq	.+110    	; 0x2b8 <DIO_WritePin+0x72>
 24a:	41 30       	cpi	r20, 0x01	; 1
 24c:	09 f0       	breq	.+2      	; 0x250 <DIO_WritePin+0xa>
 24e:	6b c0       	rjmp	.+214    	; 0x326 <DIO_WritePin+0xe0>


	case DIO_PIN_HIGH :


		switch (Port)
 250:	81 30       	cpi	r24, 0x01	; 1
 252:	89 f0       	breq	.+34     	; 0x276 <DIO_WritePin+0x30>
 254:	28 f0       	brcs	.+10     	; 0x260 <DIO_WritePin+0x1a>
 256:	82 30       	cpi	r24, 0x02	; 2
 258:	c9 f0       	breq	.+50     	; 0x28c <DIO_WritePin+0x46>
 25a:	83 30       	cpi	r24, 0x03	; 3
 25c:	11 f1       	breq	.+68     	; 0x2a2 <DIO_WritePin+0x5c>
 25e:	08 95       	ret
		{
		case DIO_PORTA :

			SET_BIT(PORTA,Pin);
 260:	2b b3       	in	r18, 0x1b	; 27
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_WritePin+0x26>
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_WritePin+0x22>
 270:	82 2b       	or	r24, r18
 272:	8b bb       	out	0x1b, r24	; 27

			break;
 274:	08 95       	ret

		case DIO_PORTB :

			SET_BIT(PORTB,Pin);
 276:	28 b3       	in	r18, 0x18	; 24
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_WritePin+0x3c>
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_WritePin+0x38>
 286:	82 2b       	or	r24, r18
 288:	88 bb       	out	0x18, r24	; 24

			break;
 28a:	08 95       	ret

		case DIO_PORTC :

			SET_BIT(PORTC,Pin);
 28c:	25 b3       	in	r18, 0x15	; 21
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_WritePin+0x52>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	6a 95       	dec	r22
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_WritePin+0x4e>
 29c:	82 2b       	or	r24, r18
 29e:	85 bb       	out	0x15, r24	; 21

			break;
 2a0:	08 95       	ret

		case DIO_PORTD :

			SET_BIT(PORTD,Pin);
 2a2:	22 b3       	in	r18, 0x12	; 18
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_WritePin+0x68>
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_WritePin+0x64>
 2b2:	82 2b       	or	r24, r18
 2b4:	82 bb       	out	0x12, r24	; 18

			break;
 2b6:	08 95       	ret
		break;

		case DIO_PIN_LOW :


			switch (Port)
 2b8:	81 30       	cpi	r24, 0x01	; 1
 2ba:	91 f0       	breq	.+36     	; 0x2e0 <DIO_WritePin+0x9a>
 2bc:	28 f0       	brcs	.+10     	; 0x2c8 <DIO_WritePin+0x82>
 2be:	82 30       	cpi	r24, 0x02	; 2
 2c0:	d9 f0       	breq	.+54     	; 0x2f8 <DIO_WritePin+0xb2>
 2c2:	83 30       	cpi	r24, 0x03	; 3
 2c4:	29 f1       	breq	.+74     	; 0x310 <DIO_WritePin+0xca>
 2c6:	08 95       	ret
			{
			case DIO_PORTA :

				CLR_BIT(PORTA,Pin);
 2c8:	2b b3       	in	r18, 0x1b	; 27
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_WritePin+0x8e>
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	6a 95       	dec	r22
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_WritePin+0x8a>
 2d8:	80 95       	com	r24
 2da:	82 23       	and	r24, r18
 2dc:	8b bb       	out	0x1b, r24	; 27

				break;
 2de:	08 95       	ret

			case DIO_PORTB :

				CLR_BIT(PORTB,Pin);
 2e0:	28 b3       	in	r18, 0x18	; 24
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_WritePin+0xa6>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_WritePin+0xa2>
 2f0:	80 95       	com	r24
 2f2:	82 23       	and	r24, r18
 2f4:	88 bb       	out	0x18, r24	; 24

				break;
 2f6:	08 95       	ret

			case DIO_PORTC :

				CLR_BIT(PORTC,Pin);
 2f8:	25 b3       	in	r18, 0x15	; 21
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_WritePin+0xbe>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	6a 95       	dec	r22
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_WritePin+0xba>
 308:	80 95       	com	r24
 30a:	82 23       	and	r24, r18
 30c:	85 bb       	out	0x15, r24	; 21

				break;
 30e:	08 95       	ret

			case DIO_PORTD :

				CLR_BIT(PORTD,Pin);
 310:	22 b3       	in	r18, 0x12	; 18
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_WritePin+0xd6>
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	6a 95       	dec	r22
 31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_WritePin+0xd2>
 320:	80 95       	com	r24
 322:	82 23       	and	r24, r18
 324:	82 bb       	out	0x12, r24	; 18
 326:	08 95       	ret

00000328 <FlexSensor_Init>:
	else if(finger5 > 1)
	{
		uint8* word15 = "how";
		LCD_WriteString(word15);
	}
}
 328:	0e 94 64 00 	call	0xc8	; 0xc8 <ADC_Init>
 32c:	08 95       	ret

0000032e <FlexSensor_Read>:
 32e:	cf 93       	push	r28
 330:	c8 2f       	mov	r28, r24
 332:	0e 94 6f 00 	call	0xde	; 0xde <ADC_Select_Channel>
 336:	0e 94 a2 00 	call	0x144	; 0x144 <ADC_ReadAnalogValue>
 33a:	c5 30       	cpi	r28, 0x05	; 5
 33c:	58 f4       	brcc	.+22     	; 0x354 <FlexSensor_Read+0x26>
 33e:	9c 01       	movw	r18, r24
 340:	ad ec       	ldi	r26, 0xCD	; 205
 342:	bc ec       	ldi	r27, 0xCC	; 204
 344:	0e 94 49 03 	call	0x692	; 0x692 <__umulhisi3>
 348:	96 95       	lsr	r25
 34a:	87 95       	ror	r24
 34c:	96 95       	lsr	r25
 34e:	87 95       	ror	r24
 350:	96 95       	lsr	r25
 352:	87 95       	ror	r24
 354:	cf 91       	pop	r28
 356:	08 95       	ret

00000358 <FlexSensor_Set_Word_diff_mode>:

void FlexSensor_Set_Word_diff_mode(uint16 finger1_2, uint16 finger3_4, uint16 finger5_0)
{
 358:	ef 92       	push	r14
 35a:	ff 92       	push	r15
 35c:	0f 93       	push	r16
 35e:	1f 93       	push	r17
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	ec 01       	movw	r28, r24
 366:	8b 01       	movw	r16, r22
 368:	7a 01       	movw	r14, r20
	LCD_Clear();
 36a:	0e 94 15 03 	call	0x62a	; 0x62a <LCD_Clear>
	
	if(finger1_2 > 45 )
 36e:	ce 32       	cpi	r28, 0x2E	; 46
 370:	d1 05       	cpc	r29, r1
 372:	28 f0       	brcs	.+10     	; 0x37e <FlexSensor_Set_Word_diff_mode+0x26>
	{
		uint8* word1 = "stop";
		LCD_WriteString(word1);
 374:	80 e6       	ldi	r24, 0x60	; 96
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 ff 02 	call	0x5fe	; 0x5fe <LCD_WriteString>
 37c:	70 c0       	rjmp	.+224    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	}
	else if(finger1_2 > 40)
 37e:	c9 32       	cpi	r28, 0x29	; 41
 380:	d1 05       	cpc	r29, r1
 382:	28 f0       	brcs	.+10     	; 0x38e <FlexSensor_Set_Word_diff_mode+0x36>
	{
		uint8* word3 = "welcome";
		LCD_WriteString(word3);
 384:	88 e6       	ldi	r24, 0x68	; 104
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 ff 02 	call	0x5fe	; 0x5fe <LCD_WriteString>
 38c:	68 c0       	rjmp	.+208    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	}
	else if(finger1_2 > 35)
 38e:	c4 32       	cpi	r28, 0x24	; 36
 390:	d1 05       	cpc	r29, r1
 392:	28 f0       	brcs	.+10     	; 0x39e <FlexSensor_Set_Word_diff_mode+0x46>
	{
		uint8* word4 = "go";
		LCD_WriteString(word4);
 394:	80 e7       	ldi	r24, 0x70	; 112
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 ff 02 	call	0x5fe	; 0x5fe <LCD_WriteString>
 39c:	60 c0       	rjmp	.+192    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	}
	else if(finger1_2 > 30)
 39e:	cf 31       	cpi	r28, 0x1F	; 31
 3a0:	d1 05       	cpc	r29, r1
 3a2:	28 f0       	brcs	.+10     	; 0x3ae <FlexSensor_Set_Word_diff_mode+0x56>
	{
		uint8* word5 = "return";
		LCD_WriteString(word5);
 3a4:	83 e7       	ldi	r24, 0x73	; 115
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <LCD_WriteString>
 3ac:	58 c0       	rjmp	.+176    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	}
	else if(finger1_2 > 25)
 3ae:	ca 31       	cpi	r28, 0x1A	; 26
 3b0:	d1 05       	cpc	r29, r1
 3b2:	28 f0       	brcs	.+10     	; 0x3be <FlexSensor_Set_Word_diff_mode+0x66>
	{
		uint8* word6 = "love";
		LCD_WriteString(word6);
 3b4:	8a e7       	ldi	r24, 0x7A	; 122
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <LCD_WriteString>
 3bc:	50 c0       	rjmp	.+160    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	}
	else if(finger1_2 > 20)
 3be:	c5 31       	cpi	r28, 0x15	; 21
 3c0:	d1 05       	cpc	r29, r1
 3c2:	28 f0       	brcs	.+10     	; 0x3ce <FlexSensor_Set_Word_diff_mode+0x76>
	{
		uint8* word7 = "ok";
		LCD_WriteString(word7);
 3c4:	8f e7       	ldi	r24, 0x7F	; 127
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <LCD_WriteString>
 3cc:	48 c0       	rjmp	.+144    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	}
	else if(finger1_2 > 15)
 3ce:	c0 31       	cpi	r28, 0x10	; 16
 3d0:	d1 05       	cpc	r29, r1
 3d2:	28 f0       	brcs	.+10     	; 0x3de <FlexSensor_Set_Word_diff_mode+0x86>
	{
		uint8* word8 = "where";
		LCD_WriteString(word8);
 3d4:	82 e8       	ldi	r24, 0x82	; 130
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <LCD_WriteString>
 3dc:	40 c0       	rjmp	.+128    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	}
	else if(finger1_2 > 10)
 3de:	2b 97       	sbiw	r28, 0x0b	; 11
 3e0:	28 f0       	brcs	.+10     	; 0x3ec <FlexSensor_Set_Word_diff_mode+0x94>
	{
		uint8* word9 = "move";
		LCD_WriteString(word9);
 3e2:	88 e8       	ldi	r24, 0x88	; 136
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <LCD_WriteString>
 3ea:	39 c0       	rjmp	.+114    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	}
	else if(finger3_4 > 40)
 3ec:	09 32       	cpi	r16, 0x29	; 41
 3ee:	11 05       	cpc	r17, r1
 3f0:	28 f0       	brcs	.+10     	; 0x3fc <FlexSensor_Set_Word_diff_mode+0xa4>
	{
		uint8* word10 = "well";
		LCD_WriteString(word10);
 3f2:	8d e8       	ldi	r24, 0x8D	; 141
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <LCD_WriteString>
 3fa:	31 c0       	rjmp	.+98     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	}
	else if(finger3_4 > 35)
 3fc:	04 32       	cpi	r16, 0x24	; 36
 3fe:	11 05       	cpc	r17, r1
 400:	28 f0       	brcs	.+10     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
	{
		uint8* word11 = "you";
		LCD_WriteString(word11);
 402:	82 e9       	ldi	r24, 0x92	; 146
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 ff 02 	call	0x5fe	; 0x5fe <LCD_WriteString>
 40a:	29 c0       	rjmp	.+82     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	}
	else if(finger3_4 > 30)
 40c:	0f 31       	cpi	r16, 0x1F	; 31
 40e:	11 05       	cpc	r17, r1
 410:	28 f0       	brcs	.+10     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	{
		uint8* word12 = "me";
		LCD_WriteString(word12);
 412:	8d e6       	ldi	r24, 0x6D	; 109
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 ff 02 	call	0x5fe	; 0x5fe <LCD_WriteString>
 41a:	21 c0       	rjmp	.+66     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	}
	else if(finger3_4 > 25)
 41c:	0a 31       	cpi	r16, 0x1A	; 26
 41e:	11 05       	cpc	r17, r1
 420:	28 f0       	brcs	.+10     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	{
		uint8* word13 = "what";
		LCD_WriteString(word13);
 422:	86 e9       	ldi	r24, 0x96	; 150
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 ff 02 	call	0x5fe	; 0x5fe <LCD_WriteString>
 42a:	19 c0       	rjmp	.+50     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	}
	else if(finger3_4 > 15)
 42c:	00 31       	cpi	r16, 0x10	; 16
 42e:	11 05       	cpc	r17, r1
 430:	28 f0       	brcs	.+10     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
	{
		uint8* word14 = "when";
		LCD_WriteString(word14);
 432:	8b e9       	ldi	r24, 0x9B	; 155
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	0e 94 ff 02 	call	0x5fe	; 0x5fe <LCD_WriteString>
 43a:	11 c0       	rjmp	.+34     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	}
	else if(finger5_0 > 3)
 43c:	84 e0       	ldi	r24, 0x04	; 4
 43e:	e8 16       	cp	r14, r24
 440:	f1 04       	cpc	r15, r1
 442:	28 f0       	brcs	.+10     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
	{
		uint8* word15 = "how";
		LCD_WriteString(word15);
 444:	80 ea       	ldi	r24, 0xA0	; 160
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	0e 94 ff 02 	call	0x5fe	; 0x5fe <LCD_WriteString>
 44c:	08 c0       	rjmp	.+16     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	}
	else if(finger5_0 > 2)
 44e:	83 e0       	ldi	r24, 0x03	; 3
 450:	e8 16       	cp	r14, r24
 452:	f1 04       	cpc	r15, r1
 454:	20 f0       	brcs	.+8      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	{
		uint8* word2 = "hi";
		LCD_WriteString(word2);
 456:	85 e6       	ldi	r24, 0x65	; 101
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <LCD_WriteString>
	}
}
 45e:	df 91       	pop	r29
 460:	cf 91       	pop	r28
 462:	1f 91       	pop	r17
 464:	0f 91       	pop	r16
 466:	ff 90       	pop	r15
 468:	ef 90       	pop	r14
 46a:	08 95       	ret

0000046c <LCD_WriteCommand>:
	while(y > 1 )
	{
		LCD_WriteChar(((y%10)+48));
		y /= 10;
	}
}
 46c:	cf 93       	push	r28
 46e:	c8 2f       	mov	r28, r24
 470:	40 e0       	ldi	r20, 0x00	; 0
 472:	61 e0       	ldi	r22, 0x01	; 1
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	0e 94 23 01 	call	0x246	; 0x246 <DIO_WritePin>
 47a:	40 e0       	ldi	r20, 0x00	; 0
 47c:	62 e0       	ldi	r22, 0x02	; 2
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	0e 94 23 01 	call	0x246	; 0x246 <DIO_WritePin>
 484:	40 e0       	ldi	r20, 0x00	; 0
 486:	63 e0       	ldi	r22, 0x03	; 3
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	0e 94 23 01 	call	0x246	; 0x246 <DIO_WritePin>
 48e:	8b b3       	in	r24, 0x1b	; 27
 490:	9c 2f       	mov	r25, r28
 492:	90 7f       	andi	r25, 0xF0	; 240
 494:	8f 70       	andi	r24, 0x0F	; 15
 496:	89 2b       	or	r24, r25
 498:	82 bb       	out	0x12, r24	; 18
 49a:	41 e0       	ldi	r20, 0x01	; 1
 49c:	63 e0       	ldi	r22, 0x03	; 3
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	0e 94 23 01 	call	0x246	; 0x246 <DIO_WritePin>
 4a4:	8f e9       	ldi	r24, 0x9F	; 159
 4a6:	9f e0       	ldi	r25, 0x0F	; 15
 4a8:	01 97       	sbiw	r24, 0x01	; 1
 4aa:	f1 f7       	brne	.-4      	; 0x4a8 <LCD_WriteCommand+0x3c>
 4ac:	00 c0       	rjmp	.+0      	; 0x4ae <LCD_WriteCommand+0x42>
 4ae:	00 00       	nop
 4b0:	40 e0       	ldi	r20, 0x00	; 0
 4b2:	63 e0       	ldi	r22, 0x03	; 3
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	0e 94 23 01 	call	0x246	; 0x246 <DIO_WritePin>
 4ba:	2b b3       	in	r18, 0x1b	; 27
 4bc:	30 e1       	ldi	r19, 0x10	; 16
 4be:	c3 9f       	mul	r28, r19
 4c0:	c0 01       	movw	r24, r0
 4c2:	11 24       	eor	r1, r1
 4c4:	92 2f       	mov	r25, r18
 4c6:	9f 70       	andi	r25, 0x0F	; 15
 4c8:	89 2b       	or	r24, r25
 4ca:	82 bb       	out	0x12, r24	; 18
 4cc:	41 e0       	ldi	r20, 0x01	; 1
 4ce:	63 e0       	ldi	r22, 0x03	; 3
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	0e 94 23 01 	call	0x246	; 0x246 <DIO_WritePin>
 4d6:	8f e9       	ldi	r24, 0x9F	; 159
 4d8:	9f e0       	ldi	r25, 0x0F	; 15
 4da:	01 97       	sbiw	r24, 0x01	; 1
 4dc:	f1 f7       	brne	.-4      	; 0x4da <LCD_WriteCommand+0x6e>
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <LCD_WriteCommand+0x74>
 4e0:	00 00       	nop
 4e2:	40 e0       	ldi	r20, 0x00	; 0
 4e4:	63 e0       	ldi	r22, 0x03	; 3
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	0e 94 23 01 	call	0x246	; 0x246 <DIO_WritePin>
 4ec:	8f e1       	ldi	r24, 0x1F	; 31
 4ee:	9e e4       	ldi	r25, 0x4E	; 78
 4f0:	01 97       	sbiw	r24, 0x01	; 1
 4f2:	f1 f7       	brne	.-4      	; 0x4f0 <LCD_WriteCommand+0x84>
 4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <LCD_WriteCommand+0x8a>
 4f6:	00 00       	nop
 4f8:	cf 91       	pop	r28
 4fa:	08 95       	ret

000004fc <LCD_Init>:
 4fc:	41 e0       	ldi	r20, 0x01	; 1
 4fe:	61 e0       	ldi	r22, 0x01	; 1
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinDir>
 506:	41 e0       	ldi	r20, 0x01	; 1
 508:	62 e0       	ldi	r22, 0x02	; 2
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinDir>
 510:	41 e0       	ldi	r20, 0x01	; 1
 512:	63 e0       	ldi	r22, 0x03	; 3
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinDir>
 51a:	41 e0       	ldi	r20, 0x01	; 1
 51c:	64 e0       	ldi	r22, 0x04	; 4
 51e:	83 e0       	ldi	r24, 0x03	; 3
 520:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinDir>
 524:	41 e0       	ldi	r20, 0x01	; 1
 526:	65 e0       	ldi	r22, 0x05	; 5
 528:	83 e0       	ldi	r24, 0x03	; 3
 52a:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinDir>
 52e:	41 e0       	ldi	r20, 0x01	; 1
 530:	66 e0       	ldi	r22, 0x06	; 6
 532:	83 e0       	ldi	r24, 0x03	; 3
 534:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinDir>
 538:	41 e0       	ldi	r20, 0x01	; 1
 53a:	67 e0       	ldi	r22, 0x07	; 7
 53c:	83 e0       	ldi	r24, 0x03	; 3
 53e:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinDir>
 542:	2f ef       	ldi	r18, 0xFF	; 255
 544:	81 ee       	ldi	r24, 0xE1	; 225
 546:	94 e0       	ldi	r25, 0x04	; 4
 548:	21 50       	subi	r18, 0x01	; 1
 54a:	80 40       	sbci	r24, 0x00	; 0
 54c:	90 40       	sbci	r25, 0x00	; 0
 54e:	e1 f7       	brne	.-8      	; 0x548 <LCD_Init+0x4c>
 550:	00 c0       	rjmp	.+0      	; 0x552 <LCD_Init+0x56>
 552:	00 00       	nop
 554:	83 e3       	ldi	r24, 0x33	; 51
 556:	0e 94 36 02 	call	0x46c	; 0x46c <LCD_WriteCommand>
 55a:	82 e3       	ldi	r24, 0x32	; 50
 55c:	0e 94 36 02 	call	0x46c	; 0x46c <LCD_WriteCommand>
 560:	88 e2       	ldi	r24, 0x28	; 40
 562:	0e 94 36 02 	call	0x46c	; 0x46c <LCD_WriteCommand>
 566:	8c e0       	ldi	r24, 0x0C	; 12
 568:	0e 94 36 02 	call	0x46c	; 0x46c <LCD_WriteCommand>
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	0e 94 36 02 	call	0x46c	; 0x46c <LCD_WriteCommand>
 572:	86 e0       	ldi	r24, 0x06	; 6
 574:	0e 94 36 02 	call	0x46c	; 0x46c <LCD_WriteCommand>
 578:	82 e0       	ldi	r24, 0x02	; 2
 57a:	0e 94 36 02 	call	0x46c	; 0x46c <LCD_WriteCommand>
 57e:	08 95       	ret

00000580 <LCD_WriteChar>:
 580:	cf 93       	push	r28
 582:	c8 2f       	mov	r28, r24
 584:	41 e0       	ldi	r20, 0x01	; 1
 586:	61 e0       	ldi	r22, 0x01	; 1
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	0e 94 23 01 	call	0x246	; 0x246 <DIO_WritePin>
 58e:	40 e0       	ldi	r20, 0x00	; 0
 590:	62 e0       	ldi	r22, 0x02	; 2
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	0e 94 23 01 	call	0x246	; 0x246 <DIO_WritePin>
 598:	40 e0       	ldi	r20, 0x00	; 0
 59a:	63 e0       	ldi	r22, 0x03	; 3
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	0e 94 23 01 	call	0x246	; 0x246 <DIO_WritePin>
 5a2:	8c 2f       	mov	r24, r28
 5a4:	80 7f       	andi	r24, 0xF0	; 240
 5a6:	82 bb       	out	0x12, r24	; 18
 5a8:	41 e0       	ldi	r20, 0x01	; 1
 5aa:	63 e0       	ldi	r22, 0x03	; 3
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	0e 94 23 01 	call	0x246	; 0x246 <DIO_WritePin>
 5b2:	8f e9       	ldi	r24, 0x9F	; 159
 5b4:	9f e0       	ldi	r25, 0x0F	; 15
 5b6:	01 97       	sbiw	r24, 0x01	; 1
 5b8:	f1 f7       	brne	.-4      	; 0x5b6 <LCD_WriteChar+0x36>
 5ba:	00 c0       	rjmp	.+0      	; 0x5bc <LCD_WriteChar+0x3c>
 5bc:	00 00       	nop
 5be:	40 e0       	ldi	r20, 0x00	; 0
 5c0:	63 e0       	ldi	r22, 0x03	; 3
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	0e 94 23 01 	call	0x246	; 0x246 <DIO_WritePin>
 5c8:	c2 95       	swap	r28
 5ca:	c0 7f       	andi	r28, 0xF0	; 240
 5cc:	c2 bb       	out	0x12, r28	; 18
 5ce:	41 e0       	ldi	r20, 0x01	; 1
 5d0:	63 e0       	ldi	r22, 0x03	; 3
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	0e 94 23 01 	call	0x246	; 0x246 <DIO_WritePin>
 5d8:	8f e9       	ldi	r24, 0x9F	; 159
 5da:	9f e0       	ldi	r25, 0x0F	; 15
 5dc:	01 97       	sbiw	r24, 0x01	; 1
 5de:	f1 f7       	brne	.-4      	; 0x5dc <LCD_WriteChar+0x5c>
 5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <LCD_WriteChar+0x62>
 5e2:	00 00       	nop
 5e4:	40 e0       	ldi	r20, 0x00	; 0
 5e6:	63 e0       	ldi	r22, 0x03	; 3
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	0e 94 23 01 	call	0x246	; 0x246 <DIO_WritePin>
 5ee:	8f e1       	ldi	r24, 0x1F	; 31
 5f0:	9e e4       	ldi	r25, 0x4E	; 78
 5f2:	01 97       	sbiw	r24, 0x01	; 1
 5f4:	f1 f7       	brne	.-4      	; 0x5f2 <LCD_WriteChar+0x72>
 5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <LCD_WriteChar+0x78>
 5f8:	00 00       	nop
 5fa:	cf 91       	pop	r28
 5fc:	08 95       	ret

000005fe <LCD_WriteString>:
 5fe:	0f 93       	push	r16
 600:	1f 93       	push	r17
 602:	cf 93       	push	r28
 604:	fc 01       	movw	r30, r24
 606:	80 81       	ld	r24, Z
 608:	88 23       	and	r24, r24
 60a:	59 f0       	breq	.+22     	; 0x622 <LCD_WriteString+0x24>
 60c:	8f 01       	movw	r16, r30
 60e:	c0 e0       	ldi	r28, 0x00	; 0
 610:	0e 94 c0 02 	call	0x580	; 0x580 <LCD_WriteChar>
 614:	cf 5f       	subi	r28, 0xFF	; 255
 616:	f8 01       	movw	r30, r16
 618:	ec 0f       	add	r30, r28
 61a:	f1 1d       	adc	r31, r1
 61c:	80 81       	ld	r24, Z
 61e:	81 11       	cpse	r24, r1
 620:	f7 cf       	rjmp	.-18     	; 0x610 <LCD_WriteString+0x12>
 622:	cf 91       	pop	r28
 624:	1f 91       	pop	r17
 626:	0f 91       	pop	r16
 628:	08 95       	ret

0000062a <LCD_Clear>:

void LCD_Clear(void)
{
	LCD_WriteCommand(0x01);
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	0e 94 36 02 	call	0x46c	; 0x46c <LCD_WriteCommand>
 630:	08 95       	ret

00000632 <main>:
	uint16 finger3_4 = 0;
	uint16 finger5_0 = 0;
	
	uint8 delay = 300;

    LCD_Init();
 632:	0e 94 7e 02 	call	0x4fc	; 0x4fc <LCD_Init>
	FlexSensor_Init();
 636:	0e 94 94 01 	call	0x328	; 0x328 <FlexSensor_Init>
		finger5 = FlexSensor_Read(4);
		*/
		
		//FlexSensor_Set_Word(finger1, finger2, finger3, finger4, finger5);
		
		finger1_2 = FlexSensor_Read(12);
 63a:	8c e0       	ldi	r24, 0x0C	; 12
 63c:	0e 94 97 01 	call	0x32e	; 0x32e <FlexSensor_Read>
 640:	ec 01       	movw	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 642:	8f e3       	ldi	r24, 0x3F	; 63
 644:	9c e9       	ldi	r25, 0x9C	; 156
 646:	01 97       	sbiw	r24, 0x01	; 1
 648:	f1 f7       	brne	.-4      	; 0x646 <main+0x14>
 64a:	00 c0       	rjmp	.+0      	; 0x64c <main+0x1a>
 64c:	00 00       	nop
		_delay_ms(10);
		finger3_4 = FlexSensor_Read(34);
 64e:	82 e2       	ldi	r24, 0x22	; 34
 650:	0e 94 97 01 	call	0x32e	; 0x32e <FlexSensor_Read>
 654:	8c 01       	movw	r16, r24
 656:	8f e3       	ldi	r24, 0x3F	; 63
 658:	9c e9       	ldi	r25, 0x9C	; 156
 65a:	01 97       	sbiw	r24, 0x01	; 1
 65c:	f1 f7       	brne	.-4      	; 0x65a <main+0x28>
 65e:	00 c0       	rjmp	.+0      	; 0x660 <main+0x2e>
 660:	00 00       	nop
		_delay_ms(10);
		finger5_0 = FlexSensor_Read(4);
 662:	84 e0       	ldi	r24, 0x04	; 4
 664:	0e 94 97 01 	call	0x32e	; 0x32e <FlexSensor_Read>
		
		FlexSensor_Set_Word_diff_mode(finger1_2, finger3_4, finger5_0);
 668:	ac 01       	movw	r20, r24
 66a:	b8 01       	movw	r22, r16
 66c:	ce 01       	movw	r24, r28
 66e:	0e 94 ac 01 	call	0x358	; 0x358 <FlexSensor_Set_Word_diff_mode>
 672:	9f ef       	ldi	r25, 0xFF	; 255
 674:	25 e2       	ldi	r18, 0x25	; 37
 676:	82 e0       	ldi	r24, 0x02	; 2
 678:	91 50       	subi	r25, 0x01	; 1
 67a:	20 40       	sbci	r18, 0x00	; 0
 67c:	80 40       	sbci	r24, 0x00	; 0
 67e:	e1 f7       	brne	.-8      	; 0x678 <main+0x46>
 680:	00 c0       	rjmp	.+0      	; 0x682 <main+0x50>
 682:	00 00       	nop
 684:	da cf       	rjmp	.-76     	; 0x63a <main+0x8>

00000686 <__tablejump2__>:
 686:	ee 0f       	add	r30, r30
 688:	ff 1f       	adc	r31, r31
 68a:	05 90       	lpm	r0, Z+
 68c:	f4 91       	lpm	r31, Z
 68e:	e0 2d       	mov	r30, r0
 690:	09 94       	ijmp

00000692 <__umulhisi3>:
 692:	a2 9f       	mul	r26, r18
 694:	b0 01       	movw	r22, r0
 696:	b3 9f       	mul	r27, r19
 698:	c0 01       	movw	r24, r0
 69a:	a3 9f       	mul	r26, r19
 69c:	70 0d       	add	r23, r0
 69e:	81 1d       	adc	r24, r1
 6a0:	11 24       	eor	r1, r1
 6a2:	91 1d       	adc	r25, r1
 6a4:	b2 9f       	mul	r27, r18
 6a6:	70 0d       	add	r23, r0
 6a8:	81 1d       	adc	r24, r1
 6aa:	11 24       	eor	r1, r1
 6ac:	91 1d       	adc	r25, r1
 6ae:	08 95       	ret

000006b0 <_exit>:
 6b0:	f8 94       	cli

000006b2 <__stop_program>:
 6b2:	ff cf       	rjmp	.-2      	; 0x6b2 <__stop_program>
